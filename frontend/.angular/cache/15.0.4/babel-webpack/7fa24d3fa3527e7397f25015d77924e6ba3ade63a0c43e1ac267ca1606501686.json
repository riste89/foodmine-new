{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Cart } from '../sheard/models/cart';\nimport { CartItem } from '../sheard/models/cartitem';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = this.getCartFromLocaleStorage();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) return;\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocaleStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocaleStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocaleStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocaleStorage();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocaleStorage() {\n    this.cart.totalPrice = this.cart.items.reduce((prevSumb, currentSum) => prevSumb + currentSum.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevSum, currItem) => prevSum + currItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('User', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocaleStorage() {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,2BAA2B;;AAMpD,OAAM,MAAOC,WAAW;EAItBC;IAHQ,SAAI,GAAQ,IAAI,CAACC,wBAAwB,EAAE;IAC3C,gBAAW,GAAwB,IAAIL,eAAe,CAAC,IAAI,CAACM,IAAI,CAAC;EAEzD;EAEhBC,SAAS,CAACC,IAAS;IACjB,IAAIC,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAC7BC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAGL,IAAI,CAACK,EAAE,CAAC;IACnC,IAAGJ,QAAQ,EAAE;IACb,IAAI,CAACH,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC,IAAIZ,QAAQ,CAACM,IAAI,CAAC,CAAC;IACxC,IAAI,CAACO,sBAAsB,EAAE;EAG/B;EACDC,cAAc,CAACC,MAAa;IAC3B,IAAI,CAACX,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,IAAI,CAACI,KAAK,CAChCQ,MAAM,CAACN,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,IAAII,MAAM,CAAC;IACrC,IAAI,CAACF,sBAAsB,EAAE;EAC9B;EAEAI,cAAc,CAACF,MAAa,EAAEG,QAAe;IAC5C,IAAIX,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKI,MAAM,CAAC;IAElE,IAAG,CAACR,QAAQ,EAAE;IACbA,QAAQ,CAACW,QAAQ,GAAGA,QAAQ;IAC5BX,QAAQ,CAACY,KAAK,GAAGD,QAAQ,GAAGX,QAAQ,CAACD,IAAI,CAACa,KAAK;IAChD,IAAI,CAACN,sBAAsB,EAAE;EAE9B;EAEAO,SAAS;IACR,IAAI,CAAChB,IAAI,GAAG,IAAIL,IAAI,EAAE;IACtB,IAAI,CAACc,sBAAsB,EAAE;EAE9B;EAEAQ,iBAAiB;IAChB,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EAEvC;EAEQV,sBAAsB;IAC7B,IAAI,CAACT,IAAI,CAACoB,UAAU,GAAG,IAAI,CAACpB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACC,QAAQ,EAAEC,UAAU,KACjED,QAAQ,GAAGC,UAAU,CAACR,KAAK,EAAE,CAAC,CAAC;IAChC,IAAI,CAACf,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACxB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACI,OAAO,EAAEC,QAAQ,KAChED,OAAO,GAAGC,QAAQ,CAACZ,QAAQ,EAAE,CAAC,CAAC;IAEhC,MAAMa,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC7B,IAAI,CAAC;IAC1C8B,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,QAAQ,CAAC;IACtC,IAAI,CAACT,WAAW,CAACc,IAAI,CAAC,IAAI,CAAChC,IAAI,CAAC;EAEjC;EAEQD,wBAAwB;IAC/B,MAAM4B,QAAQ,GAAGG,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAON,QAAQ,GAAEC,IAAI,CAACM,KAAK,CAACP,QAAQ,CAAC,GAAG,IAAIhC,IAAI,EAAE;EAEnD;;AA1DYE,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsC,SAAXtC,WAAW;EAAAuC,YAFV;AAAM","names":["BehaviorSubject","Cart","CartItem","CartService","constructor","getCartFromLocaleStorage","cart","addToCart","food","cartItem","items","find","item","id","push","setCartToLocaleStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","cartSubject","asObservable","totalPrice","reduce","prevSumb","currentSum","totalCount","prevSum","currItem","cartJson","JSON","stringify","localStorage","setItem","next","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["/home/riste/Desktop/foodmine/frontend/src/app/service/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Cart } from '../sheard/models/cart';\nimport { CartItem } from '../sheard/models/cartitem';\nimport { Food } from '../sheard/models/food';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart:Cart = this.getCartFromLocaleStorage()\n  private cartSubject:BehaviorSubject<Cart>= new BehaviorSubject(this.cart)\n\n  constructor() { }\n\n  addToCart(food:Food){\n    let cartItem = this.cart.items\n    .find(item=>item.food.id===food.id)\n    if(cartItem) return\n    this.cart.items.push(new CartItem(food))\n    this.setCartToLocaleStorage()\n\n\n  }\n removeFromCart(foodId:string){\n  this.cart.items = this.cart.items\n  .filter(item=>item.food.id != foodId)\n  this.setCartToLocaleStorage()\n }\n\n changeQuantity(foodId:string, quantity:number){\n  let cartItem = this.cart.items.find(item=>item.food.id === foodId)\n\n  if(!cartItem) return\n   cartItem.quantity = quantity\n   cartItem.price = quantity * cartItem.food.price\n  this.setCartToLocaleStorage()\n\n }\n\n clearCart(){\n  this.cart = new Cart()\n  this.setCartToLocaleStorage()\n\n }\n\n getCartObservable():Observable<Cart>{\n  return this.cartSubject.asObservable()\n\n }\n\n private setCartToLocaleStorage(){\n  this.cart.totalPrice = this.cart.items.reduce((prevSumb, currentSum)=>\n    prevSumb + currentSum.price, 0)\n   this.cart.totalCount = this.cart.items.reduce((prevSum, currItem)=>\n   prevSum + currItem.quantity, 0)\n\n  const cartJson = JSON.stringify(this.cart)\n  localStorage.setItem('User', cartJson)\n  this.cartSubject.next(this.cart)\n\n }\n\n private getCartFromLocaleStorage():Cart{\n  const cartJson = localStorage.getItem('Cart')\n  return cartJson? JSON.parse(cartJson) : new Cart()\n\n }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}